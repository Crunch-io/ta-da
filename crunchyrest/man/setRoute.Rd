% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/route.R
\name{setRoute}
\alias{setRoute}
\alias{registerRoute}
\title{Set a custom request handler for a path}
\usage{
setRoute(path, handler)

registerRoute(path, handler)
}
\arguments{
\item{path}{character URL segment. Unfortunately, \code{"/"} is not valid.}

\item{handler}{For \code{setRoute}, code that will be quoted and executed inside a
\code{function (req) ...} if the current request is authenticated. It should end
with the desired response content (but do \emph{not} call \code{return()}), which
will be converted to JSON. For more control, call \code{registerRoute} with an
explicit \code{function (req) ...}}
}
\value{
Called for its side effects of registering the request handler.
}
\description{
This function lets you supply a function that handles requests directly. You
can use it to build a JSON API with Shiny, which you otherwise can't do
because a proper Shiny app always returns HTML and may require JavaScript to
execute in a browser.
}
\details{
Of course, this isn't a good way to set up a JSON API server. You shouldn't
use Shiny for that. But if you only have the ability to deploy Shiny apps,
this will work :)

\code{registerRoute} lets you supply an arbitrary function of a "request" object
to map to the \code{path}. \code{setRoute} provides some boilerplate wrapping that
includes default values and ensures that the current request is
authenticated. If the user is not authenticated, the default is to return
status 403 Not Authorized with a JSON message. If authenticated, default is
200 OK status. If the code in \code{handler} errors, 500 Internal Server Error
will be returned and the R exception message will be trapped, printed to
stdout, and not shown to the user.

In \code{setRoute}, the other values you can set are:
\itemize{
\item \code{status}, if you want to return something other than \code{200 OK} on success
\item \code{headers}, if you want to supply more than \code{Content-Type: application/json}
}

Because \code{setRoute} manages Crunch authentication, any functions from the
\code{crunch} package are valid to use inside the \code{handler}, as if you were using
R locally. There is no Shiny reactivity or other (relevant) magic to
consider.

See the example for how to extract important parameters from the request, and
for a full list of available parameters in the request object, see the source
in \code{route.R}.
}
\examples{
\dontrun{
setRoute("/hack", {
# If you're concerned about state bleeding across sessions, uncomment:
# on.exit(httpcache::clearCache())

# If you're in this code, the response `status` has been set to 200,
# but you can override it like:
# status <- 202L

# You can also add to or override response headers like this:
# headers[["Location"]] <- "https://some.url/

# The handler code should end with (but not `return()`) the desired response
# body content, which will be converted to JSON.
# Here is an example of how to get useful content from the `req` object:
list(
    body = getRequestBody(req),
    query = parseQueryString(req$QUERY_STRING)
)
})
}
}
\seealso{
https://stackoverflow.com/a/34198825 for inspiration
}
