openapi: 3.0.0
x-api-id: crunch-api
info:
  title: Crunch API
  version: '1.1'
  contact:
    name: Crunch Support
    url: 'https://help.crunch.io'
    email: support@crunch.io
  description: "Developer API for Crunch.io\n\n# API conventions\n\nThe Crunch REST API follows some common conventions across all endpoints. You can assume these to be the case except where explicitly documented otherwise.\n\n## Successful requests\nSuccessful GET requests return 200 (OK) status with Content-Type: application/json response content.\n\nPATCH is generally preferred for partial updating of resources, though some endpoints do support PUT. A successful request returns 204 (No Content) status.\n\nPOST is used to create entities on the server. The URL to the created entity is returned in the Location response header, and the response status is either 201 (Created) or 202 (Accepted).\n\n202 (Accepted) is used for requests that continue to process outside of the request cycle; for example, import or export jobs that may be long running and benefit from reporting progress to clients. See Progress for how to handle the 202 response content. Requests that would otherwise return 201 (Location) will still include the Location header in the 202 response; requests that would otherwise return 204 (No Content) will have no additional response headers.\n\n## Unsuccessful requests\n“Bad” requests returning with a 4xx status may contain JSON response content with an error message.\n\nUnauthenticated requests to non-public resources return 401 (Unauthorized).\n\nAuthenticated but unauthorized responses return 404 (Not Found) rather than 403 (Forbidden) in cases where returning 403 would leak information about the existence of resources. The 403 response is reserved for cases when, for example, a user is authorized to GET a resource but not PATCH it.\n\nThe 409 (Conflict) response is used when the request may be retried and may succeed if changes are first made at a different resource. Example: when a user who has edit privileges on a dataset but is not the “current editor” attempts to PATCH a dataset resource.\n\n## Error responses\nTo avoid duplicating error responses on every endpoint description, the most common responses are listed here and only any additional, endpoint-specific responses will be documented with each api endpoint.  \n\n### HTTP status codes\n| Status Code | Description |\n| :-: | :-- |\n| 401 | Invalid access token |\n| 403 | Account locked - please contact Crunch support |\n\n## Deprecation\nWhen API resources are deprecated, responses will contain a Warning header with a message about the deprecation and a recommendation for upgrading. Our client libraries look for this response header and will alert you to upgrade your version of the library if you receive a response with this header.\n\nEndpoints that have been removed respond with a 410 (Gone) status, optionally with a message instructing you where to look instead.\n\n# Shoji envelopes\nCrunch API endpoints do not return plain old javascript objects (POJOs) directly but instead deliver POJOs in the **BODY** property of machine-readable custom envelopes that facilitate endpoint exploration and traversal.\n\nFor all endpoints documented below, the **request** models and examples **will include** the shoji envelope in order to facilitate endpoint testing. **Response** models and examples **will NOT include** the shoji envelope in order to make them more human readable and understandable.\n\n## ENTITY envelope\nA Shoji entity is identified by `element: \"shoji:entity\"`. Its principal attribute is the `body` key, which is an object containing the attributes that describe the entity.\n\n## CATALOG envelope\nA catalog is identified by `element: \"shoji:catalog\"` with its principal attribute being `index` that contains an object keyed by the URLs of the entities it contains and for each key an object (tuple) with attributes from the referenced entity.\n\nShoji catalogs are **not** ordered. For its ordered representations they may provide an `orders` set of Shoji order resources.\n\n## VIEW envelope\nA Shoji view is identified by its element key having value shoji:view with its principal attribute being value. This can contain any arbitrary JSON object.\n\n## ORDER envelope\nShoji orders are identified by the element key having a value shoji:order. Their principal attribute is the graph key which is an array containing the order of present resources.\n\nA shoji order may be associated with a catalog. In such case it will contain a subset or totality of the entities present in the catalog. The catalog remains as the authoritative source of available entities.\n\nAny entity not present on the order but present in the catalog may be considered to belong at the bottom of the root of the graph in an arbitrary order, or may be excluded from view.\n"
servers:
  - url: 'https://cors-buster.dcarr.com/app.crunch.io/api'
    description: Crunch API CORS buster
  - url: 'https://app.crunch.io/api'
    description: Crunch API
  - url: 'https://alpha.crunch.io/api'
    description: Crunch API (alpha)
components:
  schemas:
    Sub-domain-configuration:
      title: Sub-domain configuration
      type: object
      x-tags:
        - OEM
      properties:
        logo:
          type: object
          properties:
            large:
              type: string
              description: Url of large logo image
            small:
              type: string
              description: Url of small logo image
            favicon:
              type: string
              description: Url of favicon image
        palette:
          type: object
          description: Custom color palette
        name:
          type: string
          description: Company name
        oauth_redirect:
          type: boolean
          description: User logging into this sub-domain will use oauth authentication
        manifest:
          type: object
      x-examples:
        example-1:
          logo:
            large: 'https://s.crunch.io/act_app_icons/mycompany-wcaran-large.png'
            small: 'https://s.crunch.io/act_app_icons/mycompany-nchvcz-small.png'
            favicon: 'https://s.crunch.io/act_app_icons/mycompany-kyzdnb-favicon.ico'
          palette: {}
          name: My Company
          oauth_redirect: true
          manifest: {}
      description: Sub-domain configuration
    Shoji-entity:
      title: Shoji entity
      type: object
      x-tags:
        - Shoji
      properties:
        element:
          type: string
          default: shoji-entity
          description: Type of shoji element this is
        self:
          type: string
          description: Url for this entity
        body:
          type: object
          description: A plain-old javascript object (POJO) containing the contents of this entity
      required:
        - element
        - self
        - body
    Oauth-redirect:
      title: Oauth-redirect
      type: object
      x-tags:
        - Integrating Crunch
      description: ''
      properties:
        authorize_url:
          type: string
          format: uri
          example: 'https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=71778389871-ev84c1qhkfsg2fpqd7tv0hhkrsdtqdr5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fapp.crunch.io%2Fapi%2Fpublic%2Foauth2redirect%2F&scope=openid+profile+email&state=YRR6SCtvzwbsG9gWmssOqD0VVq3QFA&nonce=6974180560616078291587000412&login_hint=david.carr%40crunch.io&access_type=online'
        method:
          type: string
          example: oauth
        email:
          type: string
          format: email
          example: david.carr@crunch.io
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
      description: 'Enter Crunch access token received from login api endpont:'
paths:
  /public/login/:
    post:
      summary: Log in
      operationId: post-public-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    default: f1e0b74c79e85b7158e721e831f1c853
                  token_type:
                    type: string
                    default: Bearer
              examples:
                example-1:
                  value:
                    access_token: 0650012b49b643b8d5a60fb209ce74a9
                    token_type: Bearer
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Crunch username
                  format: email
                  example: joe@gmail.com
                password:
                  type: string
                  description: Crunch password
                  format: password
                  example: '^IsR49LC5!%'
                token:
                  type: boolean
                  default: 'false'
                  description: True results in the access token coming back in the response body for api use. False results in api server setting access token inside httpOnly cookie for browser use.
                  example: 'true'
              required:
                - email
                - password
            examples:
              Login example:
                summary: Login example
                value:
                  email: dcarr178@gmail.com
                  password: '^IsR49LC5!%'
                  token: true
        description: ''
      description: |-
        Log user in and receive an access token to be used on subsequent api requests. Nearly all interactions with the Crunch API need to be authenticated. The authentication method involves POSTing login credentials and receiving an access token. The api client should then store the access token returned and pass it in on each subsequent request in the Authorization HTTP header like this.

        Example header variable: `Authorization: Bearer 796f025f019ad8299337ba7b0924afbf`

        **TODO** the python code on https://docs.crunch.io/feature-guide/feature-authentication.html is wrong. What is the right code?
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: "curl -X POST https://app.crunch.io/api/public/login/ \\\n  -d \"{\\\"email\\\": \\\"fake.user@example.com\\\", \\\"password\\\": \\\"password\\\", \\\"token\\\": true}\" \\\n  -H \"Content-type: application/json\" \\\n  -H \"Content-Length: 73\" \n\n# The above command will perform a login and return a Bearer Token.\n# After this, you can access the endpoint via curl commands (POST, GET, PATCH), as long as\n# the -H \"Authorization: Bearer access_token\" flag is present. Substitute <access_token> with\n# the one returned on the login request."
        - lang: HTTP
          source: |-
            POST /api/public/login/ HTTP/1.1
            Host: app.crunch.io
            Content-Type: application/json
            Content-Length: 73

            {
                "email": "fake.user@example.com",
                "password": "password",
                "token", true
            }

            HTTP/1.1 200 OK
            {"access_token": "796f025f019ad8299337ba7b0924afbf", "token_type": "Bearer"}
        - lang: RCRUNCH SDK
          source: |-
            library(crunch)
            login("fake.user@example.com", "password")
            # See ?login for options, including how to store your credentials
            # in your .Rprofile
        - lang: PYCRUNCH SDK
          syntaxLang: python
          source: import pycrunch
      security: []
      tags:
        - Authentication
    get:
      summary: Link to Crunch app
      operationId: get-public-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oauth-redirect'
      description: "Provides a way for external websites to link to crunch application, passing in email address (username) in order to bypass the crunch login screen for oauth users. \n\n> ### Important!\n> This endpoint only works for user accounts configured for oauth access.\n\n# 3rd party web page\n```html\n<html><body>\nLink to \n<a href=\"https://app.crunch.io/api/public/login/?email=david.carr@crunch.io&redirect_uri=https%3A%2F%2Fapp.crunch.io%2Fshared\">\n  Crunch\n</a>\n</body></html>\n```\n\nTODO that example doesn't work. Make one that works.\n\n"
      parameters:
        - schema:
            type: string
            example: dcarr178@gmail.com
            format: email
            default: david.carr@crunch.io
          in: query
          name: email
          description: Crunch username
          required: true
        - schema:
            type: string
            format: uri
            default: 'https://app.crunch.io/shared'
          in: query
          name: redirect_uri
          description: Crunch app url to redirect user to after successful login
      security: []
      tags:
        - Integrating Crunch
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: 'curl -X GET https://app.crunch.io/api/public/login/?email=david.carr%40crunch.io&redirect_uri=https%3A%2F%2Fapp.crunch.io%2Fshared'
  /logout/:
    get:
      summary: Log out
      responses:
        '204':
          description: Logged off successfully
      operationId: get-logout
      description: Log user out and expire access token
      tags:
        - Authentication
  /public/crunchbox/share/:
    get:
      summary: Share crunchbox html
      responses:
        '200':
          description: OK
          headers: {}
          content:
            text/html:
              schema:
                type: string
              examples:
                example-1:
                  value: '<html><head>...</head><body>...</body></html>'
      operationId: get-crunchbox-share
      description: |-
        Renders HTML page containing a CrunchBox, complete with the meta data utilized by social sharing platform crawlers in constructing a share preview. Among this metadata is a url to a preview image of the rendered CrunchBox.
        # Endpoint usage in HTML file
        ```html
        <html>
        <head>
            <title>Link to CrunchBox</title>
        </head>
        <body>
        Click here to
        <a target="_blank"
           href="https://app.crunch.io/api/public/crunchbox/share/?data=%2F%2Fs.crunch.io%2Fwidget%2Findex.html%23%2Fds%2F72c27f64a12028b887d7cae248143b6b%2Frow%2F000886%2Fcolumn%2F000480%3Fviz%3DstackedBarPlot%26amp%3Bcp%3Dpercent%26amp%3Bdp%3D0%26amp%3Bgrp%3Dstack&ref=https%3A%2F%2Fwww.whitehouse.gov/">view
            CrunchBox</a>.
        </body>
        </html>
        ```
      parameters:
        - schema:
            type: string
            default: '//s.crunch.io/widget/index.html#/ds/d4b2945f727f4eccbc31544ddabf9fa4?viz=groupedBarPlot&cp=percent&dp=0&grp=stack'
          in: query
          name: data
          required: true
          description: CrunchBox widget url
        - schema:
            type: string
            default: 'https://google.com'
          in: query
          name: ref
          description: Url to use inside the CrunchBox to link user back to referring webpage
      security: []
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: 'curl -X GET https://cors-buster.dcarr.com/app.crunch.io/api/public/crunchbox/share/?data=%2F%2Fs.crunch.io%2Fwidget%2Findex.html%23%2Fds%2Fd4b2945f727f4eccbc31544ddabf9fa4%3Fviz%3DgroupedBarPlot%26cp%3Dpercent%26dp%3D0%26grp%3Dstack&ref=https%3A%2F%2Fgoogle.com'
      tags:
        - Integrating Crunch
    parameters: []
  '/users/{userid}/':
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
        description: User ID of the user you want information for
    get:
      summary: User details
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: get-users-userid
      description: User ID of the user currently logged in can be retrieved via API by performing a GET on endpoint /.
  /public/:
    get:
      summary: Options available
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  element:
                    type: string
                  self:
                    type: string
                  views:
                    type: object
                    properties:
                      signup_resend:
                        type: string
                      inquire:
                        type: string
                      password_reset:
                        type: string
                      signup:
                        type: string
                      oauth2redirect:
                        type: string
                      change_email:
                        type: string
                      login:
                        type: string
                      password_change:
                        type: string
                  config:
                    type: string
                  urls:
                    type: object
                    properties:
                      config_url:
                        type: string
                  description:
                    type: string
              examples:
                example-1:
                  value:
                    element: 'shoji:catalog'
                    self: 'https://app.crunch.io/api/public/'
                    views:
                      signup_resend: 'https://app.crunch.io/api/public/signup_resend/'
                      inquire: 'https://app.crunch.io/api/public/inquire/'
                      password_reset: 'https://app.crunch.io/api/public/password_reset/'
                      signup: 'https://app.crunch.io/api/public/signup/'
                      oauth2redirect: 'https://app.crunch.io/api/public/oauth2redirect/'
                      change_email: 'https://app.crunch.io/api/public/change_email/'
                      login: 'https://app.crunch.io/api/public/login/'
                      password_change: 'https://app.crunch.io/api/public/password_change/'
                    config: 'https://app.crunch.io/api/public/config/'
                    urls:
                      config_url: 'https://app.crunch.io/api/public/config/'
                    description: Lists all the options available to non authenticated requests
      operationId: get
      tags:
        - Catalogs
      description: Lists all the options available to non authenticated requests.
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: 'curl -X GET https://app.crunch.io/api/public/'
  /account/:
    get:
      summary: Account details
      tags:
        - Account
      responses:
        '200':
          description: OK
      operationId: get-account
      description: "All users belong to one and only one account. Accounts provide an organization-level scope for Crunch.io customers. This endpoint returns information for the authenticated user's account including branding configuration. \n\n## What are account managers?\nAccount managers can administer their various users and entities and have visibility on them. A user is an account manager if their `account_permissions.admin_account=true`."
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: 'curl -X GET https://app.crunch.io/api/account/'
  /feature_flag/:
    get:
      summary: Feature flags
      responses:
        '200':
          description: OK
      operationId: get-feature_flag
      description: Crunch uses feature flags to enable and disable system-wide features under development. This api endpoint returns the application features the authenticated user has access to.
      tags:
        - Users
  /projects/:
    get:
      summary: My projects
      tags:
        - Projects
      responses:
        '200':
          description: OK
      operationId: get-projects
      security:
        - Access Token: []
      description: Returns a list of projects the authenticated user is a member of.
  /projects/shared/:
    get:
      summary: Projects shared with me
      tags:
        - Projects
      responses:
        '200':
          description: OK
      operationId: get-projects-shared
      description: Returns a list of projects other users have shared with the authenticated user.
  /public/config/:
    get:
      summary: Company configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sub-domain-configuration'
              examples:
                example-1:
                  value:
                    logo:
                      large: 'https://s.crunch.io/act_app_icons/mycompany-wcaran-large.png'
                      small: 'https://s.crunch.io/act_app_icons/mycompany-nchvcz-small.png'
                      favicon: 'https://s.crunch.io/act_app_icons/mycompany-kyzdnb-favicon.ico'
                    palette: {}
                    name: My Company
                    oauth_redirect: true
                    manifest: {}
      operationId: get-public-config
      description: |-
        Returns a sub-domain's configuration, if configured. If none exists, the body will be empty.

        **NOTE**: This api request is designed to run against a **company sub-domain** not against `app.crunch.io`.

        `https://yougov.crunch.io/api/public/config/`

        A GET request on /public/config/ return a Shoji Entity with the subdomain’s available configurations, if any; if none exists, the body will be empty.
      x-code-samples:
        - lang: SHELL
          syntaxLang: bash
          source: 'curl -X GET https://app.crunch.io/api/public/config'
      security: []
      tags:
        - Integrating Crunch
security:
  - Access Token: []
