openapi: 3.0.0
x-api-id: crunch-api
info:
  title: Crunch API
  version: '1.1'
  contact:
    name: Crunch Support
    url: 'https://help.crunch.io'
    email: support@crunch.io
  description: |-
    Developer API for Crunch.io

    # API conventions

    The Crunch REST API follows some common conventions across all endpoints. You can assume these to be the case except where explicitly documented otherwise.

    ## Successful requests
    Successful GET requests return 200 (OK) status with Content-Type: application/json response content.

    PATCH is generally preferred for partial updating of resources, though some endpoints do support PUT. A successful request returns 204 (No Content) status.

    POST is used to create entities on the server. The URL to the created entity is returned in the Location response header, and the response status is either 201 (Created) or 202 (Accepted).

    202 (Accepted) is used for requests that continue to process outside of the request cycle; for example, import or export jobs that may be long running and benefit from reporting progress to clients. See Progress for how to handle the 202 response content. Requests that would otherwise return 201 (Location) will still include the Location header in the 202 response; requests that would otherwise return 204 (No Content) will have no additional response headers.

    ## Unsuccessful requests
    “Bad” requests returning with a 4xx status may contain JSON response content with an error message.

    Unauthenticated requests to non-public resources return 401 (Unauthorized).

    Authenticated but unauthorized responses return 404 (Not Found) rather than 403 (Forbidden) in cases where returning 403 would leak information about the existence of resources. The 403 response is reserved for cases when, for example, a user is authorized to GET a resource but not PATCH it.

    The 409 (Conflict) response is used when the request may be retried and may succeed if changes are first made at a different resource. Example: when a user who has edit privileges on a dataset but is not the “current editor” attempts to PATCH a dataset resource.

    ## Deprecation
    When API resources are deprecated, responses will contain a Warning header with a message about the deprecation and a recommendation for upgrading. Our client libraries look for this response header and will alert you to upgrade your version of the library if you receive a response with this header.

    Endpoints that have been removed respond with a 410 (Gone) status, optionally with a message instructing you where to look instead.

    # API response objects
    The Crunch API consists of just a few primitive objects, arranged differently for each request and response. Learning the basic components will help you create the most complicated queries.

    ## Shoji entity
    A Shoji entity is identified by the `element` key having value `shoji:entity`. Its principal attribute is the `body` key, which is an object containing the attributes that describe the entity.

    ## List (shoji catalog)
    A catalog is identified by its `element` key having value `shoji:catalog` with its principal attribute being `index` that contains an object keyed by the URLs of the entities it contains and for each key an object (tuple) with attributes from the referenced entity.

    Shoji catalogs are **not** ordered. For its ordered representations they may provide an `orders` set of Shoji order resources.

    ## Item (shoji view)
    A Shoji view is identified by its element key having value shoji:view with its principal attribute being value. This can contain any arbitrary JSON object.

    ## Shoji order
    Shoji orders are identified by the element key having a value shoji:order. Their principal attribute is the graph key which is an array containing the order of present resources.

    A shoji order may be associated with a catalog. In such case it will contain a subset or totality of the entities present in the catalog. The catalog remains as the authoritative source of available entities.

    Any entity not present on the order but present in the catalog may be considered to belong at the bottom of the root of the graph in an arbitrary order, or may be excluded from view.
servers:
  - url: 'https://app.crunch.io/api'
    description: Crunch API
  - url: 'https://cors-buster.dcarr.com/app.crunch.io/api'
    description: Crunch API CORS buster
  - url: 'https://alpha.crunch.io/api'
    description: Crunch API (alpha)
components:
  schemas: {}
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
      description: "Enter Crunch access token received from login api endpont:"
paths:
  /public/login/:
    post:
      summary: Log in
      operationId: post-public-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    default: f1e0b74c79e85b7158e721e831f1c853
                  token_type:
                    type: string
                    default: Bearer
        '401':
          description: Incorrect login
        '403':
          description: Account locked - please contact Crunch support.
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: content-type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Crunch username
                  format: email
                  example: joe@gmail.com
                password:
                  type: string
                  description: Crunch password
                  format: password
                  example: 'xh%1e8Gltcf'
                token:
                  type: boolean
                  default: 'false'
                  description: True results in the access token coming back in the response body for api use. False results in api server setting access token inside httpOnly cookie for browser use.
                  example: 'true'
              required:
                - email
                - password
            examples:
              Login example:
                summary: Login example
                value:
                  email: dcarr178@gmail.com
                  password: 'ZBQMLG41^*FA'
                  token: true
        description: ''
      description: |-
        Log user in and receive an access token to be used on subsequent api requests. Nearly all interactions with the Crunch API need to be authenticated. The authentication method involves POSTing login credentials and receiving an access token. The api client should then store the access token returned and pass it in on each subsequent request in the Authorization HTTP header like this.

        Example header variable: `Authorization: Bearer 796f025f019ad8299337ba7b0924afbf`

        **TODO** the python code on https://docs.crunch.io/feature-guide/feature-authentication.html is wrong. What is the right code?
      x-code-samples:
        - lang: HTTP
          source: |-
            POST /api/public/login/ HTTP/1.1
            Host: app.crunch.io
            Content-Type: application/json
            Content-Length: 73

            {
                "email": "fake.user@example.com",
                "password": "password",
                "token", true
            }

            HTTP/1.1 200 OK
            {"access_token": "796f025f019ad8299337ba7b0924afbf", "token_type": "Bearer"}
        - lang: SHELL
          syntaxLang: bash
          source: "curl -X POST \\\n  -d \"{\\\"email\\\": \\\"fake.user@example.com\\\", \\\"password\\\": \\\"password\\\", \\\"token\\\": true}\" \\\n  -H \"Content-type: application/json\" \\\n  -H \"Content-Length: 73\" \\\n  https://app.crunch.io/api/public/login/\n\n# The above command will perform a login and return a Bearer Token.\n# After this, you can access the endpoint via curl commands (POST, GET, PATCH), as long as\n# the -H \"Authorization: Bearer access_token\" flag is present. Substitute <access_token> with\n# the one returned on the login request."
        - lang: RCRUNCH SDK
          source: |-
            library(crunch)
            login("fake.user@example.com", "password")
            # See ?login for options, including how to store your credentials
            # in your .Rprofile
        - lang: PYCRUNCH SDK
          syntaxLang: python
          source: import pycrunch
      tags:
        - Log in
      security: []
    get:
      summary: Link to Crunch app
      operationId: get-public-login
      responses:
        '200':
          description: OK
      description: "<!-- theme: info -->\n> ### Important!\n> This endpoint only works for user accounts configured for oauth access.\n\nProvides a way for external websites to link to crunch application, passing in email address (username) in order to bypass the crunch login screen for oauth users. \n\n# 3rd party web page\n<!--\ntitle: \"3rd party web page\"\nlineNumbers: false\n-->\n```html\n<html><body>\nLink to \n<a href=\"https://app.crunch.io/api/public/login/?email=david.carr@crunch.io&redirect_uri=https%3A%2F%2Fapp.crunch.io%2Fshared\">\n  Crunch\n</a>\n</body></html>\n```\n\nbut that redirect_url doesn't quite work.\n\nThis one sort of works\n\nhttps://app.crunch.io/authentication/login/?email=david.carr@crunch.io&redirect_uri=https:%2F%2Fapp.crunch.io%2Fshared\n\nTODO finish testing and documenting this endpont. redirect_url needs a working example."
      parameters:
        - schema:
            type: string
            example: dcarr178@gmail.com
            format: email
          in: query
          name: email
          description: Crunch username
          required: true
        - schema:
            type: string
            format: uri
          in: query
          name: redirect_uri
      tags:
        - Log in
      security: []
  /logout/:
    get:
      summary: Log out
      tags:
        - Log in
      responses:
        '204':
          description: Logged off successfully
        '401':
          description: Access token not found
      operationId: get-logout
      description: Log user out and expire access token
  /public/crunchbox/share/:
    get:
      summary: Share crunchbox html
      tags:
        - CrunchBox
      responses:
        '200':
          description: OK
          headers: {}
          content:
            text/html:
              schema:
                type: string
      operationId: get-crunchbox-share
      description: |-
        Renders HTML page containing a CrunchBox, complete with the meta data utilized by social sharing platform crawlers in constructing a share preview. Among this metadata is a url to a preview image of the rendered CrunchBox.
        # Endpoint usage in HTML file
        <!--
        title: "HTML link to CrunchBox"
        lineNumbers: false
        -->
        ```html
        <html>
        <head>
            <title>Link to CrunchBox</title>
        </head>
        <body>
        Click here to
        <a target="_blank"
           href="https://app.crunch.io/api/public/crunchbox/share/?data=%2F%2Fs.crunch.io%2Fwidget%2Findex.html%23%2Fds%2F72c27f64a12028b887d7cae248143b6b%2Frow%2F000886%2Fcolumn%2F000480%3Fviz%3DstackedBarPlot%26amp%3Bcp%3Dpercent%26amp%3Bdp%3D0%26amp%3Bgrp%3Dstack&ref=https%3A%2F%2Fwww.whitehouse.gov/">view
            CrunchBox</a>.
        </body>
        </html>
        ```
      parameters:
        - schema:
            type: string
            default: '//s.crunch.io/widget/index.html#/ds/d4b2945f727f4eccbc31544ddabf9fa4?viz=groupedBarPlot&cp=percent&dp=0&grp=stack'
          in: query
          name: data
          required: true
          description: CrunchBox widget url
        - schema:
            type: string
            default: 'https://google.com'
          in: query
          name: ref
          description: Url to use inside the CrunchBox to link user back to referring webpage
      security: []
    parameters: []
  '/users/{userid}/':
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
        description: User ID of the user you want information for
    get:
      summary: Get user information
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: get-users-userid
      description: User ID of the user currently logged in can be retrieved via API by performing a GET on endpoint /.
  /:
    get:
      summary: Get a bunch of urls
      responses:
        '200':
          description: OK
      operationId: get
      tags:
        - URLs
  /account/:
    get:
      summary: My account
      tags:
        - Account
      responses:
        '200':
          description: OK
      operationId: get-account
      description: |-
        All Users belong to one and only one Account. Accounts provide an organization-level scope for Crunch.io customers. This endpoint returns information for the authenticated user's account including branding configuration.

        # Account managers
        Account managers can administer their various users and entities and have visibility on them. A user is an account manager if their `account_permissions.admin_account=true`.
  /feature_flag/:
    get:
      summary: Get the application features the authenticated user has access to
      tags:
        - Feature Flags
      responses:
        '200':
          description: OK
      operationId: get-feature_flag
      description: Crunch uses feature flags to enable and disable system-wide features under development.
      security:
        - Access Token: []
  /projects/:
    get:
      summary: My projects
      tags:
        - Projects
      responses:
        '200':
          description: OK
      operationId: get-projects
      security:
        - Access Token: []
      description: Returns a list of projects the authenticated user is a member of.
  /projects/shared/:
    get:
      summary: Projects shared with me
      tags:
        - Projects
      responses:
        '200':
          description: OK
      operationId: get-projects-shared
      description: Returns a list of projects other users have shared with the authenticated user.
security:
  - Access Token: []
